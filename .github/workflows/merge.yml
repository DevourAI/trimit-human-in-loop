name: Generate and copy openapi files to S3

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install-aws-cli-action
        uses: unfor19/install-aws-cli-action@v1

      - name: Verify AWS CLI installation
        run: |
          echo "Verifying AWS CLI installation..."
          which aws
          aws --version

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION
        shell: bash

      - uses: actions/cache@v4
        id: cache-yarn-restore
        name: Define a cache for the yarn install based on the dependencies lock file
        with:
          path: |
            ./frontend/.yarn/cache
            ./frontend/node_modules
          key: yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Yarn install
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn install
        working-directory: ./frontend

      - name: Save Yarn Cache
        id: cache-yarn-save
        uses: actions/cache/save@v4
        with:
          path: |
            ./frontend/.yarn/cache
            ./frontend/node_modules
          key: ${{ steps.cache-yarn-restore.outputs.cache-primary-key }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3.0.0

      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - uses: actions/cache@v4
        id: cache-poetry-restore
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: poetry install

      - name: Save Poetry Cache
        id: cache-poetry-save
        uses: actions/cache/save@v4
        with:
          path: ./.venv
          key: ${{ steps.cache-poetry-restore.outputs.cache-primary-key }}

      - name: Generate OpenAPI files
        env:
          AUTH_SECRET_KEY: ${{ secrets.AUTH_SECRET_KEY }}
        run: make openapi

      - name: Copy files to s3
        run: make copy_gen_to_s3
